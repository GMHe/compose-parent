
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.32.2:3306/compose_sync?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
    username: root
    password: root
    hikari:
      pool-name: HikariCP-Pool
      minimum-idle: 3
      idle-timeout: 600000
      maximum-pool-size: 20
      auto-commit: true
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1

  redis:
    database: 0
    #host: 192.168.32.2
    cluster:
      nodes: 192.168.32.2:6391,192.168.32.2:6392,192.168.32.2:6393
    jedis:
      pool:
        #最大连接数据库连接数,设 0 为没有限制
        max-active: 8
        #最大等待连接中的数量,设 0 为没有限制
        max-idle: 8
        #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        max-wait: -1ms
        #最小等待连接中的数量,设 0 为没有限制
        min-idle: 0
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        max-wait: -1ms
        min-idle: 0
      shutdown-timeout: 100ms
    password:
    #port: 6379
    username:
  task:
    # Spring 执行器配置，对应 TaskExecutionProperties 配置类。对于 Spring 异步任务，会使用该执行器。
    execution:
      thread-name-prefix: task- # 线程池的线程名的前缀。默认为 task- ，建议根据自己应用来设置
      pool: # 线程池相关
        core-size: 8 # 核心线程数，线程池创建时候初始化的线程数。默认为 8 。
        max-size: 20 # 最大线程数，线程池最大的线程数，只有在缓冲队列满了之后，才会申请超过核心线程数的线程。默认为 Integer.MAX_VALUE
        keep-alive: 60s # 允许线程的空闲时间，当超过了核心线程之外的线程，在空闲时间到达之后会被销毁。默认为 60 秒
        queue-capacity: 200 # 缓冲队列大小，用来缓冲执行任务的队列的大小。默认为 Integer.MAX_VALUE 。
        allow-core-thread-timeout: true # 是否允许核心线程超时，即开启线程池的动态增长和缩小。默认为 true 。
      shutdown:
        await-termination: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
        #await-termination-period: 60 # 等待任务完成的最大时长，单位为秒。默认为 0 ，根据自己应用来设置


logging:
  config: classpath:log4j2.xml
  level:
    web: info

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    cache-enabled: false
    #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    log-prefix: info

distributedId:
  address: 192.168.32.2:2181
  group: compose_sync

seata:
  # 是否开启seata，默认true
  enabled: true
  application-id: ${spring.application.name}
  # seata事务组的名称，一定要和config.tx(nacos)中配置的相同
  tx-service-group: ${spring.application.name}-tx-group
#  service:
#    grouplist:
#      compose-sync: 192.168.32.2:8091
#    vgroup-mapping:
#      compose-sync-group: compose-sync
  # 配置中心的配置
  config:
    # 使用类型nacos
    type: nacos
    # nacos作为配置中心的相关配置，需要和server在同一个注册中心下
    nacos:
      # 命名空间，需要server端(registry和config)、nacos配置client端(registry和config)保持一致
      namespace: seata
      # 地址
      server-addr: 192.168.32.2:8845
      # 组， 需要server端(registry和config)、nacos配置client端(registry和config)保持一致
      group: SEATA_GROUP
      # 用户名和密码
      username: nacos
      password: nacos
  registry:
    type: nacos
    nacos:
      # 这里的名字一定要和seata服务端中的名称相同，默认是seata-server
      application: seata-server
      # 需要server端(registry和config)、nacos配置client端(registry和config)保持一致
      group: SEATA_GROUP
      namespace: seata
      username: nacos
      password: nacos
      server-addr: 192.168.32.2:8845

# sa-token配置
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: satoken
  # token有效期，单位s 默认30天, -1代表永不过期
  timeout: 2592000
  # token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
  activity-timeout: -1
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: true
  # token风格
  token-style: random-128
  # jwt秘钥
  jwt-secret-key: composesync


kafka:
  address: 192.168.32.2:9092,192.168.32.2:9093,192.168.32.2:9094
  userName:
  passwd:
  batchSize: 1000


#canal配置
canal:
  host: 192.168.32.2 #host ip,不填默认为127.0.0.1
  port: 11111 #端口号, 不填默认为1111
  destination: compose-sync #不填默认为example
  userName: admin #不填默认为example
  password: 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 #不填默认为example
  batchSize: 1000 #批次, 不填默认为1000
  instance: compose-sync
  filter:  compose_sync.storage
  #数据库,表过滤器,多个过滤器用逗号隔开 不填默认为全部数据库和表
  custom: true #true 为自定义表处理 , false为全局统一处理


redis:
  table:
    key: canal_test #redis中的key
  sync:
    update:
      coloum : id #数据同步时, 根据某一列做数据修改
