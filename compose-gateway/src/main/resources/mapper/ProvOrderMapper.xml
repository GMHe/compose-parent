<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.compose.gateway.dao.ProvOrderMapper">
  <resultMap id="BaseResultMap" type="cn.compose.gateway.entity.ProvOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <id column="order_number" jdbcType="VARCHAR" property="orderNumber" />
    <result column="platform_order_no" jdbcType="VARCHAR" property="platformOrderNo" />
    <result column="resource_id" jdbcType="INTEGER" property="resourceId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="pay_amount" jdbcType="DECIMAL" property="payAmount" />
    <result column="pay_amount_actual" jdbcType="DECIMAL" property="payAmountActual" />
    <result column="valid_time" jdbcType="INTEGER" property="validTime" />
    <result column="pay_url" jdbcType="VARCHAR" property="payUrl" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="resorce_amount" jdbcType="DECIMAL" property="resorceAmount" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_number, platform_order_no, resource_id, user_id, `status`, pay_amount, 
    pay_amount_actual, valid_time, pay_url, pay_time, resorce_amount, remark, create_time, 
    update_time
  </sql>
  <select id="selectByExample" parameterType="cn.compose.gateway.entity.ProvOrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from prov_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from prov_order
    where id = #{id,jdbcType=INTEGER}
      and order_number = #{orderNumber,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from prov_order
    where id = #{id,jdbcType=INTEGER}
      and order_number = #{orderNumber,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.compose.gateway.entity.ProvOrderExample">
    delete from prov_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.compose.gateway.entity.ProvOrder">
    insert into prov_order (id, order_number, platform_order_no, 
      resource_id, user_id, `status`, 
      pay_amount, pay_amount_actual, valid_time, 
      pay_url, pay_time, resorce_amount, 
      remark, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{orderNumber,jdbcType=VARCHAR}, #{platformOrderNo,jdbcType=VARCHAR}, 
      #{resourceId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, 
      #{payAmount,jdbcType=DECIMAL}, #{payAmountActual,jdbcType=DECIMAL}, #{validTime,jdbcType=INTEGER}, 
      #{payUrl,jdbcType=VARCHAR}, #{payTime,jdbcType=TIMESTAMP}, #{resorceAmount,jdbcType=DECIMAL}, 
      #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.compose.gateway.entity.ProvOrder">
    insert into prov_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderNumber != null">
        order_number,
      </if>
      <if test="platformOrderNo != null">
        platform_order_no,
      </if>
      <if test="resourceId != null">
        resource_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="payAmountActual != null">
        pay_amount_actual,
      </if>
      <if test="validTime != null">
        valid_time,
      </if>
      <if test="payUrl != null">
        pay_url,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="resorceAmount != null">
        resorce_amount,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderNumber != null">
        #{orderNumber,jdbcType=VARCHAR},
      </if>
      <if test="platformOrderNo != null">
        #{platformOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="resourceId != null">
        #{resourceId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmountActual != null">
        #{payAmountActual,jdbcType=DECIMAL},
      </if>
      <if test="validTime != null">
        #{validTime,jdbcType=INTEGER},
      </if>
      <if test="payUrl != null">
        #{payUrl,jdbcType=VARCHAR},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="resorceAmount != null">
        #{resorceAmount,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.compose.gateway.entity.ProvOrderExample" resultType="java.lang.Long">
    select count(*) from prov_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update prov_order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNumber != null">
        order_number = #{record.orderNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.platformOrderNo != null">
        platform_order_no = #{record.platformOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.resourceId != null">
        resource_id = #{record.resourceId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.payAmount != null">
        pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.payAmountActual != null">
        pay_amount_actual = #{record.payAmountActual,jdbcType=DECIMAL},
      </if>
      <if test="record.validTime != null">
        valid_time = #{record.validTime,jdbcType=INTEGER},
      </if>
      <if test="record.payUrl != null">
        pay_url = #{record.payUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.resorceAmount != null">
        resorce_amount = #{record.resorceAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update prov_order
    set id = #{record.id,jdbcType=INTEGER},
      order_number = #{record.orderNumber,jdbcType=VARCHAR},
      platform_order_no = #{record.platformOrderNo,jdbcType=VARCHAR},
      resource_id = #{record.resourceId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=TINYINT},
      pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      pay_amount_actual = #{record.payAmountActual,jdbcType=DECIMAL},
      valid_time = #{record.validTime,jdbcType=INTEGER},
      pay_url = #{record.payUrl,jdbcType=VARCHAR},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      resorce_amount = #{record.resorceAmount,jdbcType=DECIMAL},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.compose.gateway.entity.ProvOrder">
    update prov_order
    <set>
      <if test="platformOrderNo != null">
        platform_order_no = #{platformOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="resourceId != null">
        resource_id = #{resourceId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmountActual != null">
        pay_amount_actual = #{payAmountActual,jdbcType=DECIMAL},
      </if>
      <if test="validTime != null">
        valid_time = #{validTime,jdbcType=INTEGER},
      </if>
      <if test="payUrl != null">
        pay_url = #{payUrl,jdbcType=VARCHAR},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="resorceAmount != null">
        resorce_amount = #{resorceAmount,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
      and order_number = #{orderNumber,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.compose.gateway.entity.ProvOrder">
    update prov_order
    set platform_order_no = #{platformOrderNo,jdbcType=VARCHAR},
      resource_id = #{resourceId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      `status` = #{status,jdbcType=TINYINT},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      pay_amount_actual = #{payAmountActual,jdbcType=DECIMAL},
      valid_time = #{validTime,jdbcType=INTEGER},
      pay_url = #{payUrl,jdbcType=VARCHAR},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      resorce_amount = #{resorceAmount,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
      and order_number = #{orderNumber,jdbcType=VARCHAR}
  </update>
</mapper>