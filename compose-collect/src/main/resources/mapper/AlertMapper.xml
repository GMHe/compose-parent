<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.compose.collect.dao.AlertMapper">
  <resultMap id="BaseResultMap" type="cn.compose.collect.entity.Alert">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="category_item_id" jdbcType="BIGINT" property="categoryItemId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="category_env_id" jdbcType="BIGINT" property="categoryEnvId" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="filter" jdbcType="VARCHAR" property="filter" />
    <result column="threshold" jdbcType="VARCHAR" property="threshold" />
    <result column="threshold_description" jdbcType="VARCHAR" property="thresholdDescription" />
    <result column="config_sync_status" jdbcType="TINYINT" property="configSyncStatus" />
    <result column="config_sync_time" jdbcType="TIMESTAMP" property="configSyncTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.compose.collect.entity.Alert">
    <result column="filter_description" jdbcType="LONGVARCHAR" property="filterDescription" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, category_item_id, `name`, category_env_id, `status`, `filter`, threshold, threshold_description, 
    config_sync_status, config_sync_time, create_time, update_time, create_user, update_user
  </sql>
  <sql id="Blob_Column_List">
    filter_description
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.compose.collect.entity.AlertExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from alert
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.compose.collect.entity.AlertExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from alert
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from alert
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Long">
    delete from alert
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.compose.collect.entity.AlertExample">
    delete from alert
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.compose.collect.entity.Alert">
    insert into alert (id, category_item_id, `name`, 
      category_env_id, `status`, `filter`, 
      threshold, threshold_description, config_sync_status, 
      config_sync_time, create_time, update_time, 
      create_user, update_user, filter_description
      )
    values (#{id,jdbcType=BIGINT}, #{categoryItemId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{categoryEnvId,jdbcType=BIGINT}, #{status,jdbcType=TINYINT}, #{filter,jdbcType=VARCHAR}, 
      #{threshold,jdbcType=VARCHAR}, #{thresholdDescription,jdbcType=VARCHAR}, #{configSyncStatus,jdbcType=TINYINT}, 
      #{configSyncTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createUser,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}, #{filterDescription,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.compose.collect.entity.Alert">
    insert into alert
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="categoryItemId != null">
        category_item_id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="categoryEnvId != null">
        category_env_id,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="filter != null">
        `filter`,
      </if>
      <if test="threshold != null">
        threshold,
      </if>
      <if test="thresholdDescription != null">
        threshold_description,
      </if>
      <if test="configSyncStatus != null">
        config_sync_status,
      </if>
      <if test="configSyncTime != null">
        config_sync_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="filterDescription != null">
        filter_description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="categoryItemId != null">
        #{categoryItemId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="categoryEnvId != null">
        #{categoryEnvId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="filter != null">
        #{filter,jdbcType=VARCHAR},
      </if>
      <if test="threshold != null">
        #{threshold,jdbcType=VARCHAR},
      </if>
      <if test="thresholdDescription != null">
        #{thresholdDescription,jdbcType=VARCHAR},
      </if>
      <if test="configSyncStatus != null">
        #{configSyncStatus,jdbcType=TINYINT},
      </if>
      <if test="configSyncTime != null">
        #{configSyncTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="filterDescription != null">
        #{filterDescription,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.compose.collect.entity.AlertExample" resultType="java.lang.Long">
    select count(*) from alert
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update alert
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.categoryItemId != null">
        category_item_id = #{record.categoryItemId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.categoryEnvId != null">
        category_env_id = #{record.categoryEnvId,jdbcType=BIGINT},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.filter != null">
        `filter` = #{record.filter,jdbcType=VARCHAR},
      </if>
      <if test="record.threshold != null">
        threshold = #{record.threshold,jdbcType=VARCHAR},
      </if>
      <if test="record.thresholdDescription != null">
        threshold_description = #{record.thresholdDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.configSyncStatus != null">
        config_sync_status = #{record.configSyncStatus,jdbcType=TINYINT},
      </if>
      <if test="record.configSyncTime != null">
        config_sync_time = #{record.configSyncTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.filterDescription != null">
        filter_description = #{record.filterDescription,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update alert
    set id = #{record.id,jdbcType=BIGINT},
      category_item_id = #{record.categoryItemId,jdbcType=BIGINT},
      `name` = #{record.name,jdbcType=VARCHAR},
      category_env_id = #{record.categoryEnvId,jdbcType=BIGINT},
      `status` = #{record.status,jdbcType=TINYINT},
      `filter` = #{record.filter,jdbcType=VARCHAR},
      threshold = #{record.threshold,jdbcType=VARCHAR},
      threshold_description = #{record.thresholdDescription,jdbcType=VARCHAR},
      config_sync_status = #{record.configSyncStatus,jdbcType=TINYINT},
      config_sync_time = #{record.configSyncTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      filter_description = #{record.filterDescription,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update alert
    set id = #{record.id,jdbcType=BIGINT},
      category_item_id = #{record.categoryItemId,jdbcType=BIGINT},
      `name` = #{record.name,jdbcType=VARCHAR},
      category_env_id = #{record.categoryEnvId,jdbcType=BIGINT},
      `status` = #{record.status,jdbcType=TINYINT},
      `filter` = #{record.filter,jdbcType=VARCHAR},
      threshold = #{record.threshold,jdbcType=VARCHAR},
      threshold_description = #{record.thresholdDescription,jdbcType=VARCHAR},
      config_sync_status = #{record.configSyncStatus,jdbcType=TINYINT},
      config_sync_time = #{record.configSyncTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.compose.collect.entity.Alert">
    update alert
    <set>
      <if test="categoryItemId != null">
        category_item_id = #{categoryItemId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="categoryEnvId != null">
        category_env_id = #{categoryEnvId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="filter != null">
        `filter` = #{filter,jdbcType=VARCHAR},
      </if>
      <if test="threshold != null">
        threshold = #{threshold,jdbcType=VARCHAR},
      </if>
      <if test="thresholdDescription != null">
        threshold_description = #{thresholdDescription,jdbcType=VARCHAR},
      </if>
      <if test="configSyncStatus != null">
        config_sync_status = #{configSyncStatus,jdbcType=TINYINT},
      </if>
      <if test="configSyncTime != null">
        config_sync_time = #{configSyncTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="filterDescription != null">
        filter_description = #{filterDescription,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.compose.collect.entity.Alert">
    update alert
    set category_item_id = #{categoryItemId,jdbcType=BIGINT},
      `name` = #{name,jdbcType=VARCHAR},
      category_env_id = #{categoryEnvId,jdbcType=BIGINT},
      `status` = #{status,jdbcType=TINYINT},
      `filter` = #{filter,jdbcType=VARCHAR},
      threshold = #{threshold,jdbcType=VARCHAR},
      threshold_description = #{thresholdDescription,jdbcType=VARCHAR},
      config_sync_status = #{configSyncStatus,jdbcType=TINYINT},
      config_sync_time = #{configSyncTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR},
      filter_description = #{filterDescription,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.compose.collect.entity.Alert">
    update alert
    set category_item_id = #{categoryItemId,jdbcType=BIGINT},
      `name` = #{name,jdbcType=VARCHAR},
      category_env_id = #{categoryEnvId,jdbcType=BIGINT},
      `status` = #{status,jdbcType=TINYINT},
      `filter` = #{filter,jdbcType=VARCHAR},
      threshold = #{threshold,jdbcType=VARCHAR},
      threshold_description = #{thresholdDescription,jdbcType=VARCHAR},
      config_sync_status = #{configSyncStatus,jdbcType=TINYINT},
      config_sync_time = #{configSyncTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>